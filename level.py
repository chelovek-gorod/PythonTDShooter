# ОПИСАНИЕ УРОВНЕЙ ИГРЫ

# из файла constants импортируем размер ячейки (клетки) игрового поля
from constants import CEIL_SIZE
# из файла wall импортируем класс для создания стен
from wall import Wall
# из файла bot импортируем класс для создания ботов
from bot import Bot

# рассчитываем размер половины ячейки, для смещения уровня на пол-стены от края игрового окна и для удобного определения центра ячейки
HALF_CEIL_SIZE = CEIL_SIZE / 2

# список игровых уровней
# в поле 'background' - храним имя файла тайла для фона текущего уровня
# в поле ''map' - храним список рядов и ячеек (клеток) с условными обозначениями объектов текущего уровня
# условные обозначения:
#       '#' - стена
#       'P' - стартовая позиция игрока
#       'D' - бот 'droid' (легкий)
#       'B' - бот 'bot' (трудный)
levels_list = [
    {   # level 1
        'background' : 'bg_grass',
        'map': [
            # 0   1   2   3   4   5   6   7   8   9   10
            ['#','#','#','#','#','#','#','#','#','#','#'], # 0
            ['#',' ',' ',' ',' ',' ','#','B',' ',' ','#'], # 1
            ['#',' ','#','#','#',' ','#',' ',' ',' ','#'], # 2
            ['#',' ','#','D',' ',' ','#',' ',' ',' ','#'], # 3
            ['#',' ','#',' ',' ','#','#',' ',' ',' ','#'], # 4
            ['#','P','#',' ',' ',' ',' ',' ',' ','D','#'], # 5
            ['#','#','#','#','#','#','#','#','#','#','#'], # 6
        ],
    },
    {   # level 2
        'background' : 'bg_desert',
        'map': [
            # 0   1   2   3   4   5   6   7   8   9   10
            ['#','#','#','#','#','#','#','#','#','#','#'], # 0
            ['#','B',' ',' ',' ',' ',' ',' ',' ','B','#'], # 1
            ['#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'], # 2
            ['#','#','#','#','#','#',' ',' ','#','#','#'], # 3
            ['#',' ',' ',' ',' ',' ',' ',' ',' ',' ','#'], # 4
            ['#','P',' ','#','D',' ',' ',' ',' ','D','#'], # 5
            ['#','#','#','#','#','#','#','#','#','#','#'], # 6
        ],
    },
    {   # level 3
        'background' : 'bg_night',
        'map': [
            # 0   1   2   3   4   5   6   7   8   9   10
            ['#','#','#','#','#','#','#','#','#','#','#'], # 0
            ['#',' ',' ','B',' ',' ',' ','B',' ',' ','#'], # 1
            ['#',' ','#','#',' ',' ',' ','#','#',' ','#'], # 2
            ['#',' ',' ','D',' ','B',' ','D',' ',' ','#'], # 3
            ['#',' ','#','#',' ',' ',' ','#','#',' ','#'], # 4
            ['#','P',' ',' ',' ',' ',' ',' ',' ',' ','#'], # 5
            ['#','#','#','#','#','#','#','#','#','#','#'], # 6
        ],
    },
]

# функция генерации уровня, принимает карту и объект игрока (игрок не пересоздается, а смещается в стартовую позицию)
def get_level( level_map, player ):
    # задаем начало отсчета, сместившись на половину ячейки вверх и вправо
    ceil_x, ceil_y = -HALF_CEIL_SIZE, -HALF_CEIL_SIZE
    for line in level_map: # цикл перебора рядов, с ячейками уровня
        for ceil in line: # цикл перебора ячеек (клеток) в текущем ряду
            # по условному обозначению - определяем что необходимо поместить в текущую ячейку
            if ceil == '#' : Wall(ceil_x, ceil_y) # стена
            elif ceil == 'D' : Bot(ceil_x + HALF_CEIL_SIZE, ceil_y + HALF_CEIL_SIZE, 'droid') # бот 'droid' (легкий)
            elif ceil == 'B' : Bot(ceil_x + HALF_CEIL_SIZE, ceil_y + HALF_CEIL_SIZE, 'bot') # бот 'bot' (трудный)
            elif ceil == 'P' : # стартовая ячейка игрока
                player.rect.x = ceil_x
                player.rect.y = ceil_y

            ceil_x += CEIL_SIZE # смещаемся по оси x на размер ячейки (переходим к следующей клетки ряда)
            
        ceil_x = -HALF_CEIL_SIZE # смещаемся по оси x к началу отсчета ряда (пол ячейки правее игрового окна)
        ceil_y += CEIL_SIZE # смещаемся по оси y на размер ячейки (переходим к следующему ряду)